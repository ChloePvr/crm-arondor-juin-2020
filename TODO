✔ Interface pour nav component navItem @done(20-06-10 09:47)
✔ Page list orders @done(20-06-10 10:23)
✔ Enum StateOrders @done(20-06-10 10:23)
✔ Interface Order @done(20-06-10 10:42)
✔ Modèle Order @done(20-06-10 10:42)
✔ Installer json-server (fake api rest full côté front) @done(20-06-10 10:42)
✔ Service Orders @started(20-06-10 10:42) @done(20-06-10 13:57) @lasted(3h15m37s)
✔ Appel http et les observables @done(20-06-10 13:57)
✔ TableauLightComponent (stupid) @done(20-06-11 12:07)
✔ Life cycles @done(20-06-10 17:04)
✔ Directives angular @done(20-06-10 17:04)
✔ Directives perso @done(20-06-11 12:07)
✔ Pipe perso @done(20-06-10 17:04)
✔ Pipe asynchrone @done(20-06-11 13:36)
✔ BtnComponent (stupid) @done(20-06-11 12:07)

✔ TP : page list clients en prenant exemple sur page list orders @done(20-06-11 17:08)
  ✔ creer un enum state-client (ACTIVE INACTIVE) @done(20-06-11 17:08)
  ✔ créer l'interface ClientI (voir db.json) @done(20-06-11 17:08)
  ✔ modèle Client (class) @done(20-06-11 17:08)
  ✔ service ClientsService @done(20-06-11 17:08)
  ✔ page list-client (template-one-col, app-text, table, state-directive, btn (clients/add)) @done(20-06-11 17:08)
  ✔ table scss ajouter les selecteurs .state-active et .state-inactive @done(20-06-11 17:08)

✔ ReactiveFormsModule @done(20-06-11 17:08)
✔ FormGroup @done(20-06-11 17:08)
✔ FormControl @done(20-06-11 17:08)
✔ FormBuilder @done(20-06-11 17:08)
✔ Binding FormGroup et FormControl avec le html @done(20-06-11 17:08)
✔ Initialiser les FormControl @done(20-06-11 17:08)

✔ ngSubmit @done(20-06-12 09:44)
✔ @Output() @done(20-06-12 09:44)
✔ Validators @done(20-06-12 09:44)
✔ Rendre le bouton d'envoi disable si Validators invalide @done(20-06-12 09:44)
✔ Message d'erreur @done(20-06-12 09:44)
✔ Signaux d'erreur grâce au css et aux validateurs @done(20-06-12 09:51)

✔ TP form add client @done(20-06-12 10:15)
✔ TP delete (observable chaud pour la collection) @done(20-06-12 11:25)
  ✔ ajouter une colone Action dans le tableau (page list order ts) @done(20-06-12 11:25)
  ✔ ajouter un td avec une icone delete dans le tableau (page list order) @done(20-06-12 11:25)
  ✔ ajouter un (click)=delete(item) sur cet icon @done(20-06-12 11:25)
  ✔ créer la fonction delete(item: Order) dans page list order ts @done(20-06-12 11:25)
  ✔ créer la fonction deleteItem(item: Order ou id: number) dans le service @done(20-06-12 11:25)
  ✔ modifier app page list order ts pour avoir un observable chaud pour collection$ @done(20-06-12 11:25)
  ✔ initialiser collection$ avec un appel http (this.os.collection.subscribe()) @done(20-06-12 11:25)
  ✔ dans la fonction delete() page list order ts, dans le subscribe on actualise collection$ avec un nouvel appel http (this.os.collection.subscribe()) @done(20-06-12 11:25)

✔ TP edit @done(20-06-12 14:56)
  ✔ add icon edit dans colonne action @done(20-06-12 14:56)
  ✔ add (click)="edit(item)" sur cet icon @done(20-06-12 14:56)
  ✔ edit(item) fait une redirection vers la route orders/edit/id @done(20-06-12 14:56)
  ✔ créer une route pour edit qui prend un paramètre id dans l'url @done(20-06-12 14:56)
  ✔ créer le component PageEditOrderComponent @done(20-06-12 14:56)
  ✔ ts de PageEditOrderComponent récupérer l'id qui se trouve dans l'url (ActivatedRoute) @done(20-06-12 14:56)
  ✔ call this.os.getIdemById(id:number ou string?): Observable<Order> @done(20-06-12 14:56)
  ✔ l'observable qui vous est retourné par cette méthode sert à initialiser un observable item$: Observable<Order> et qui est déclaré plus haut sur PageEditOrderComponent ts) @done(20-06-12 14:56)
  ✔ dans le page-edit-order.html, utiliser template-one-col, app-text, app-form-order @done(20-06-12 14:56)
  ✔ cette fois ci, l'input initFormItem doit être bindé avec item$ (utiliser | async) ex avec collection$ dans html de page list order @done(20-06-12 14:56)
  ✔ dans page edit order html on garde le même @Output() avec le même appel de onSubmitted($event) que dans la page add order html @done(20-06-12 14:56)
  ✔ la fonction onSubmited(item: Order) dans page-edit-order.ts va utiliser this.os.updateItem(item) @done(20-06-12 14:56)
  ✔ dans le subscribe() de this.os.updateItem(item), vous redirigez l'utilisateur vers la route orders (ex dans add component ts) @done(20-06-12 14:56)

