✔ Interface pour nav component navItem @done(20-06-10 09:47)
✔ Page list orders @done(20-06-10 10:23)
✔ Enum StateOrders @done(20-06-10 10:23)
✔ Interface Order @done(20-06-10 10:42)
✔ Modèle Order @done(20-06-10 10:42)
✔ Installer json-server (fake api rest full côté front) @done(20-06-10 10:42)
✔ Service Orders @started(20-06-10 10:42) @done(20-06-10 13:57) @lasted(3h15m37s)
✔ Appel http et les observables @done(20-06-10 13:57)
✔ TableauLightComponent (stupid) @done(20-06-11 12:07)
✔ Life cycles @done(20-06-10 17:04)
✔ Directives angular @done(20-06-10 17:04)
✔ Directives perso @done(20-06-11 12:07)
✔ Pipe perso @done(20-06-10 17:04)
✔ Pipe asynchrone @done(20-06-11 13:36)
✔ BtnComponent (stupid) @done(20-06-11 12:07)

✔ TP : page list clients en prenant exemple sur page list orders @done(20-06-11 17:08)
  ✔ creer un enum state-client (ACTIVE INACTIVE) @done(20-06-11 17:08)
  ✔ créer l'interface ClientI (voir db.json) @done(20-06-11 17:08)
  ✔ modèle Client (class) @done(20-06-11 17:08)
  ✔ service ClientsService @done(20-06-11 17:08)
  ✔ page list-client (template-one-col, app-text, table, state-directive, btn (clients/add)) @done(20-06-11 17:08)
  ✔ table scss ajouter les selecteurs .state-active et .state-inactive @done(20-06-11 17:08)

✔ ReactiveFormsModule @done(20-06-11 17:08)
✔ FormGroup @done(20-06-11 17:08)
✔ FormControl @done(20-06-11 17:08)
✔ FormBuilder @done(20-06-11 17:08)
✔ Binding FormGroup et FormControl avec le html @done(20-06-11 17:08)
✔ Initialiser les FormControl @done(20-06-11 17:08)

✔ ngSubmit @done(20-06-12 09:44)
✔ @Output() @done(20-06-12 09:44)
✔ Validators @done(20-06-12 09:44)
✔ Rendre le bouton d'envoi disable si Validators invalide @done(20-06-12 09:44)
✔ Message d'erreur @done(20-06-12 09:44)
✔ Signaux d'erreur grâce au css et aux validateurs @done(20-06-12 09:51)

☐ TP edit
☐ TP delete (observable chaud pour la collection)
☐ TP ? créer un thème à partir d'une propriété dans un service ?

add client => client/add
formulaire client validator + error message
